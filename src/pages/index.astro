---
import Base from "../layouts/Base.astro";
import Hero from "../components/Hero.astro";
import Divider from "../components/Divider.astro";
import Stats from "../components/Stats.astro";
import ProjectCard from "../components/ProjectCard.astro";
import type { MarkdownInstance } from "astro";
import type { Frontmatter } from "../types";

const allProjects: MarkdownInstance<Frontmatter>[] = await Astro.glob(
  "../pages/projects/*.md"
);
---

<Base pageTitle="GS-Dev-Portfolio">
  <div class="bg-gray-800">
    <div class="pt-8">
      <Hero />
    </div>
    <Stats />
    <Divider />
    <div
      class="bg-gray-800/50 bg-blend-overlay bg-fixed bg-[url('/slicewars.svg')] min-h-screen bg-cover bg-start text-white"
    >
      <div class="max-w-7xl mx-auto px-4 py-16">
        <ul class="flex flex-col gap-16">
          {
            allProjects.map((project) => (
              <li>
                <ProjectCard project={project} />
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </div>
</Base>

<!-- ********** hover logic ********** -->
<script>
  const container = document.querySelector(".container");
  const card: HTMLDivElement | null = document.querySelector(".card");
  let x = document.querySelector(".x-axis");
  let y = document.querySelector(".y-axis");

  container?.addEventListener("mousemove", (e) => {
    let xOffset = (e as MouseEvent).offsetX;
    let yOffset = (e as MouseEvent).offsetY;
    let cardHeight = card?.clientHeight;
    let cardWidth = card?.clientWidth;
    let containerHeight = container?.clientHeight;
    let containerWidth = container?.clientWidth;
    let containerWidthCenter = Math.round(containerWidth / 2);
    let containerHeightCenter = Math.round(containerHeight / 2);
    let heightCenter = Math.round(cardHeight! / 2);
    let widthCenter = Math.round(cardWidth! / 2);
    let rotateBaseValue = 20;
    let rotateXValue =
      ((yOffset - heightCenter) / heightCenter) * rotateBaseValue;
    let rotateYValue =
      ((widthCenter - xOffset) / widthCenter) * rotateBaseValue;
    const posOrNeg = (center: number, rotate: number) => {
      if (center > rotate) {
        return -1 * rotate;
      } else if (center <= rotate) {
        return rotate;
      }
    };

    card!.style.transform = `scale(1.1) rotateX(${posOrNeg(
      containerWidthCenter,
      rotateXValue
    )}deg) rotateY(${posOrNeg(containerHeightCenter, rotateYValue)}deg)`;
  });

  container?.addEventListener("mouseout", (e) => {
    card!.style.transform = "";
  });
</script>
